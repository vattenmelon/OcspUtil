package no.erlingreizer.util;


import org.bouncycastle.util.encoders.Base64;
import org.junit.Before;
import org.junit.Test;

import java.security.cert.X509Certificate;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class OcspUtilTest {

    String base64Ocsp = "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";
    private OcspUtil util;

    @Before
    public void setUp() {
        util = new OcspUtil();
    }

    @Test
    public void get_all_certificates() throws Exception {
        byte[] rawOcspBytes = Base64.decode(base64Ocsp);
        List<X509Certificate> certs = util.getCertificates(rawOcspBytes);
        assertEquals(3, certs.size());
        for (X509Certificate cert : certs) {
            System.out.println(cert.getSubjectDN());
        }

    }

    @Test
    public void get_all_certificates_excluding_va() throws Exception {
        String va = "C=NO,O=TestBank1,OU=123456789,CN=ca1-va";

        byte[] rawOcspBytes = Base64.decode(base64Ocsp);
        List<X509Certificate> certs = util.getCertificatesExcludingVa(rawOcspBytes);
        assertEquals(2, certs.size());
        assertTrue(certs.stream().noneMatch(cert -> cert.getSubjectDN().getName().equals(va)));
        for (X509Certificate cert : certs) {
            System.out.println(cert.getSubjectDN());
        }

    }

}
